<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqInput</title>
    <id>16379</id>
    <revision>
      <id>57803</id>
      <timestamp>2012-10-17T11:51:08Z</timestamp>
      <contributor>
        <username>Jhavlin</username>
        <id>11208</id>
      </contributor>
      <minor/>
      <text xml:space="preserve">This is an example on how to get inout from the Output Window. Just change what's done on the read method (listener implementation) to customize the behavior. Things that come to mind: chat client, text based games, etc...

&lt;pre&gt;
/*
 * Enable/create the tabs we need for the component
 */
package sample.component;

import com.dreamer.outputhandler.InputMonitor;
import com.dreamer.outputhandler.OutputHandler;
import org.jivesoftware.smack.util.ReaderListener;
import org.openide.modules.ModuleInstall;
import org.openide.windows.WindowManager;

/**
 * Manages a module's lifecycle. Remember that an installer is optional and
 * often not needed at all.
 */
public class Installer extends ModuleInstall implements ReaderListener {

    private final String normal = "Output";

    @Override
    public void restored() {
        WindowManager.getDefault().invokeWhenUIReady(new Runnable() {

            @Override
            public void run() {
                OutputHandler.output(normal, "Welcome! Type something below.");
                //Create a monitor for the tab. This enables input in the tab as well.
                InputMonitor monitor = OutputHandler.createMonitor(normal);
                //Add a listener to be notified.
                monitor.addListener(Installer.this);
            }
        });
    }

    @Override
    public void read(String read) {
        OutputHandler.output(normal, "You typed: " + read);
    }
}
&lt;/pre&gt;

&lt;b&gt;Note: &lt;/b&gt;This is feature is available on the [http://plugins.netbeans.org/plugin/39695/?show=true Output Handler plugin] version 1.2.

== Example of using input reader in output window ==

&lt;pre&gt;
package sample.component;

import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.IOException;
import org.openide.util.Exceptions;
import org.openide.util.RequestProcessor;
import org.openide.windows.IOProvider;
import org.openide.windows.InputOutput;
import org.openide.windows.OnShowing;

@OnShowing
public class OutputWindowReaderExample implements Runnable {

    /**
     * Open Output Window and ask for some input.
     */
    public static void requestAnswerExample() throws IOException {
        assert !EventQueue.isDispatchThread();
        InputOutput io = IOProvider.getDefault().getIO("ioName", true);
        io.select();
        io.getOut().println("How are you?");
        BufferedReader br = new BufferedReader(io.getIn());
        String answer = br.readLine();
        io.getOut().println("You are " + answer + " today");
        br.close();
        io.getOut().close();
        io.getErr().close();
    }

    /**
     * Call requestAnswerExample from a background thread, after initialization
     * of the user interface.
     */
    @Override
    public void run() {
        RequestProcessor.getDefault().post(new Runnable() {
            @Override
            public void run() {
                try {
                    requestAnswerExample();
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        });
    }
}
&lt;/pre&gt;

&lt;b&gt;Note:&lt;/b&gt; The module that contains this class depends on Window System API (org.openide.windows).</text>
    </revision>
  </page>
</mediawiki>
