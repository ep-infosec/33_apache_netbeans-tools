<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqFileSystem</title>
    <id>7291</id>
    <revision>
      <id>29764</id>
      <timestamp>2009-12-03T10:34:33Z</timestamp>
      <contributor>
        <username>Jskrivanek</username>
        <id>313</id>
      </contributor>
      <minor/>
      <comment>/* What is a FileSystem? */</comment>
      <text xml:space="preserve">__NOTOC__
===What is a FileSystem?===

If you use a Unix-based operating system, this concept will be familiar;  if not, it may require some explanation.

NetBeans uses [[DevFaqFileObject| virtual files]] to refer to the users files on disk, and to refer to its own configuration files.  If you used the NetBeans IDE 3.6 or earlier, you may remember that the way you constructed your classpath used to be by "mounting" filesystems - folders on your disk.

Filesystems are gone from the UI, but are alive and well under the hood in NetBeans.

A &lt;tt&gt;FileSystem&lt;/tt&gt; is a hierarchical tree of folders and files.  A filesystem has a "root folder", which may contain files and other folders.  "Files" ([[DevFaqFileObject| FileObjects ]]) in a Filesystem may be actual files on disk, or entries in JAR file, or entries in an XML file, or anything else that walks and talks like a file that someone has implemented the Filesystem interface for.

In the NetBeans Platform there are implementations of &lt;tt&gt;FileSystem&lt;/tt&gt; for
* plain disk files and folders
* ZIP/JAR files
* XML files in a predefined format ("layers")
* a block of memory with no backing store
* proxies for merging other filesystems with optional behavior overrides

Filesystems are used both to represent user files on disk, and also to represent configuration data internal to NetBeans - the [[DevFaqSystemFilesystem| System Filesystem ]].  This is one of the reason that it takes only minimal code to create a GUI view of the system filesystem - the same file recognition code that recognizes user files, gives them actions, icons and display names is what recognizes internal configuration data.

Especially in the case of the System Filesystem, it can be useful to think of a Filesystem as a "namespace" in which objects (which may contain data or represent Java objects) live - for the System Filesystem, the fact that the entries in it are referred to as files is incidental.

As of NetBeans 4.0 you will rarely work directly with the &lt;tt&gt;FileSystem&lt;/tt&gt; class. &lt;tt&gt;FileUtil.toFileObject&lt;/tt&gt; is the normal way of getting a file object from a disk file. &lt;tt&gt;FileUtil.getArchiveRoot&lt;/tt&gt; is the normal way of getting file objects from a JAR or ZIP file. In NetBeans 4.x &lt;tt&gt;FileSystem&lt;/tt&gt; implementations are also used for version control integration but the 5.0 CVS support no longer uses this system.</text>
    </revision>
  </page>
</mediawiki>
