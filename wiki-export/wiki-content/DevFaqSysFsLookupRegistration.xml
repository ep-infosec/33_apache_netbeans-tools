<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqSysFsLookupRegistration</title>
    <id>7471</id>
    <revision>
      <id>42523</id>
      <timestamp>2011-01-28T21:16:34Z</timestamp>
      <contributor>
        <username>Silhanek</username>
        <id>800</id>
      </contributor>
      <minor/>
      <comment>rename Hidden folder, it is registration, no hiding</comment>
      <text xml:space="preserve">__NOTOC__
===How can I register services into the default lookup using the system filesystem?===

In short, you probably do not want to.
The typical way of registering services is via &lt;tt&gt;META-INF/services&lt;/tt&gt; registration: [[DevFaqLookupDefault | DevFaqLookupDefault]].
That method is easier to use and offers compatibility with non-platform applications via the Java Extension Mechanism.

But there are some special cases when registration via the system filesystem is needed.
One example might be when you want to dynamically change or unregister services,
since the system filesystem is writable at runtime.
Again such needs are rare and you should probably avoid doing this unless there is no alternative.
(Usually the service interface should be defined so that the service itself is a singleton,
but it can create other objects on demand and signal certain events.)
Another minor use case is to register several services with the same implementation class but different parameters;
&lt;tt&gt;META-INF/services&lt;/tt&gt; registrations require a zero-argument constructor,
meaning you need a different implementation class for each distinct service.

As an example, assume that Module 1 defines an interface &lt;tt&gt;com.tomwheeler.example.intf.SampleInterface&lt;/tt&gt; which is exported to other modules.
Module 2 depends on Module 1 and provides an implementation of that interface named &lt;tt&gt;com.tomwheeler.example.impl.SampleImplementation&lt;/tt&gt;.
Module 1 does not need anything in its layer file (or even need a layer file at all),
but Module 2 can register the service like this:

&lt;source lang="xml"&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE filesystem PUBLIC "-//NetBeans//DTD Filesystem 1.2//EN" 
                            "http://www.netbeans.org/dtds/filesystem-1_2.dtd"&gt;
&lt;filesystem&gt;
    &lt;folder name="Services"&gt;
        &lt;folder name="wheeler-sample"&gt;
            &lt;file name="com-tomwheeler-example-this-name-is-Irrelevant.instance"&gt;
                &lt;attr name="instanceClass"
                      stringvalue="com.tomwheeler.example.impl.SampleImplementation"/&gt;
                &lt;attr name="instanceOf"
                      stringvalue="com.tomwheeler.example.intf.SampleInterface"/&gt;
            &lt;/file&gt;
        &lt;/folder&gt;
    &lt;/folder&gt;
&lt;/filesystem&gt;
&lt;/source&gt;

The name of the file is arbitrary but must end with &lt;tt&gt;.instance&lt;/tt&gt;.
The value of the &lt;tt&gt;instanceClass&lt;/tt&gt; attribute needs to define the implementation class being registered,
while &lt;tt&gt;instanceOf&lt;/tt&gt; defines the interface (or abstract class) being implemented.

If you want to create the implementation using a factory method rather than calling a zero-argument constructor,
replace &lt;tt&gt;instanceClass&lt;/tt&gt; with &lt;tt&gt;instanceCreate&lt;/tt&gt;, e.g.:
&lt;source lang="xml"&gt;
&lt;attr name="instanceCreate"
      methodvalue="com.tomwheeler.example.impl.SampleImplementations.make"/&gt;
&lt;/source&gt;
It is also possible to pass parameters to the factory method;
see [http://bits.netbeans.org/dev/javadoc/org-openide-util/org/openide/util/doc-files/api.html#instances API documentation] for details.

Client code is unaware of the registration mechanism, so the code used to look up a registered implementation of the interface would be the same as always; for example:
&lt;source lang="java"&gt;
SampleInterface intf = Lookup.getDefault().lookup(SampleInterface.class);
// now do something with intf...
&lt;/source&gt;</text>
    </revision>
  </page>
</mediawiki>
