<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqCustomizingUnexpectedExceptionDialog</title>
    <id>16285</id>
    <revision>
      <id>65221</id>
      <timestamp>2013-12-17T22:39:45Z</timestamp>
      <contributor>
        <username>Skygo</username>
        <id>12034</id>
      </contributor>
      <comment>title needed for faq crawling</comment>
      <text xml:space="preserve">== How can I customize the Unexpected Exception dialog ? ==

Problem: How do I add new functionality to the Unexpected Exception dialog?

Solution: First, one needs to create a new class as follows.

The first part of this class is that it must extend &lt;code&gt;Handler&lt;/code&gt;:  

&lt;pre&gt;
public class NewFunctionExceptionHandler extends Handler {


    @Override
    public void publish(LogRecord record) {
        if (record.getThrown() != null) {
            // This is an uncaught exception being thrown.
        }
    }

    @Override
    public void flush() {
    }

    @Override
    public void close() throws SecurityException {
    }
}
&lt;/pre&gt;

In order to properly process the exceptions, one must do a check for the exception in the &lt;code&gt;publish()&lt;/code&gt; method; &lt;code&gt;LogRecord&lt;/code&gt;s created due to exceptions being thrown will always have &lt;code&gt;Throwable&lt;/code&gt;s present.

This class also must implement &lt;code&gt;Callable&lt;JButton&gt;&lt;/code&gt;.  The button we want displayed in the Uncaught Exception dialog needs to be returned in the call() method:

&lt;pre&gt;
public class NewFunctionExceptionHandler extends Handler implements Callable&lt;JButton&gt; {


    @Override
    public void publish(LogRecord record) {
        if (record.getThrown() != null) {
            // This is an uncaught exception being thrown.
        }
    }

    @Override
    public void flush() {
    }

    @Override
    public void close() throws SecurityException {
    }

    // Return the button we want to be displayed in the Uncaught Exception Dialog.
    @Override
    public JButton call() throws Exception {
        ...
    }
}
&lt;/pre&gt;

The JButton's action listener needs to be passed the LogRecord that passed via the &lt;code&gt;publish()&lt;/code&gt; method. Then, within said action listener for the button, the developer can do what is needed with that record (e.g. Open a Top Component to email a bug report or do anything else).

The final result will look similar to:

&lt;pre&gt;
public class NewFunctionExceptionHandler extends Handler implements Callable&lt;JButton&gt; {

    private JButton newFunctionButton;
    private NewFunctionActionListener newFunctionActionListener = new NewFunctionActionListener();

    @Override
    public void publish(LogRecord record) {
        if (record.getThrown() != null) {
            newFunctionActionListener.setLogRecord(record);
        }
    }

    @Override
    public void flush() {
    }

    @Override
    public void close() throws SecurityException {
    }

    // Return the button we want to be displayed in the Uncaught Exception Dialog.
    @Override
    public JButton call() throws Exception {
        if (newFunctionButton == null) {
            newFunctionButton = new JButton("Review and Submit Issue");
            newFunctionButton.addActionListener(newFunctionActionListener);
        }

        return reviewIssueButton;
    }

    private class NewFunctionActionListener implements ActionListener {

        private LogRecord logRecord;

        public NewFunctionActionListener() {
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            // Close our Uncaught Exception Dialog first.
            SwingUtilities.windowForComponent(reviewIssueButton).setVisible(false);
        }

        public void setLogRecord(LogRecord logRecord) {
            this.logRecord = logRecord;
        }
    }
}
&lt;/pre&gt;

To register this exception handler, one only needs to add the new &lt;code&gt;Handler&lt;/code&gt; to a &lt;code&gt;java.util.Logger&lt;/code&gt; named with the empty string:
&lt;pre&gt;
   Logger.getLogger("").addHandler(new NewFunctionExceptionHandler());
&lt;/pre&gt;

Any &lt;code&gt;Handler&lt;/code&gt; attached to the "" Logger that also &lt;code&gt;implements Callable&lt;JButton&gt;&lt;/code&gt; will have its button displayed in the Uncaught Exception Dialog.

This could be done in a module's &lt;code&gt;Installer&lt;/code&gt; class.

Applies to: NetBeans IDE 6.0 and newer

Platforms: All</text>
    </revision>
  </page>
</mediawiki>
