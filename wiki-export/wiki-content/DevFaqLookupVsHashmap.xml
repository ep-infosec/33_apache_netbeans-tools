<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqLookupVsHashmap</title>
    <id>7383</id>
    <revision>
      <id>34288</id>
      <timestamp>2010-02-18T23:58:49Z</timestamp>
      <contributor>
        <username>Tboudreau</username>
        <id>108</id>
      </contributor>
      <comment>/* Why use this strange convention - wouldn't a Map be good enough? */</comment>
      <text xml:space="preserve">__NOTOC__
===Why use this strange convention - wouldn't a Map be good enough?===

Other platforms do use string-keyed maps for this sort of thing, but there are some weaknesses with that approach:
# it is impossible to enforce [[DevFaqModuleDependencies| dependencies]].  With &lt;tt&gt;[[DevFaqLookup| Lookup]]&lt;/tt&gt;, a module's code cannot request an object of type X unless it can load/access the &lt;code&gt;X.class&lt;/code&gt;. The module trying to look up an X will not be able to see &lt;code&gt;X.class&lt;/code&gt; unless it [[DevFaqModuleDependencies|declares a dependency]] on the module that defines X ''and'' the module which defines X says that it allows access to the Java package X lives in. (A &lt;tt&gt;Map&amp;lt;Class&amp;lt;T&amp;gt;,T&amp;gt;&lt;/tt&gt; would do the same job as &lt;tt&gt;Lookup&lt;/tt&gt;.)
# The class of values in a map can change without notice - so if you have &lt;tt&gt;(SomeIface) foo = (SomeIface) globalMap.get("foo")&lt;/tt&gt;, some new version of the module that provides "foo" can change the return type, causing &lt;tt&gt;ClassCastException&lt;/tt&gt; s;  with &lt;tt&gt;Lookup&lt;/tt&gt;, you cannot ever get an object that is not of the type you passed in the request - so Lookup's approach is more robust.
# &lt;tt&gt;Lookup&lt;/tt&gt; supports listening to changes in the result.
# &lt;tt&gt;Lookup&lt;/tt&gt; supports multiple instances for one key - if you call &lt;code&gt;lookup(X.class)&lt;/code&gt; you get one instance.  If you call &lt;code&gt;lookupAll(X.class)&lt;/code&gt; you get a &lt;code&gt;Collection&amp;lt;? extends X&amp;gt;&lt;/code&gt; (so with &lt;code&gt;lookupAll()&lt;/code&gt; it is more like a &lt;tt&gt;Map&amp;lt;Class&amp;lt;T&amp;gt;,List&amp;lt;T&amp;gt;&amp;gt;&lt;/tt&gt;)

There are some other capabilities of &lt;tt&gt;Lookup&lt;/tt&gt; (such as getting the specific type or number of results without actually creating objects, and providing named result items) but these are rarely used in practice.

&lt;tt&gt;Lookup&lt;/tt&gt; is very powerful, yet simple and generic;  people quickly learn to love it, once they realize what it can do.

See also the javadoc: [http://bits.netbeans.org/dev/javadoc/org-openide-util-lookup/org/openide/util/Lookup.html &lt;tt&gt;org.openide.util.Lookup&lt;/tt&gt;]</text>
    </revision>
  </page>
</mediawiki>
