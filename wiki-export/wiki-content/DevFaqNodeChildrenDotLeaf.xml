<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqNodeChildrenDotLeaf</title>
    <id>7415</id>
    <revision>
      <id>59122</id>
      <timestamp>2012-12-27T13:42:23Z</timestamp>
      <contributor>
        <username>Markiewb</username>
        <id>12770</id>
      </contributor>
      <comment>/* Why do my nodes in the Explorer always have an expand-box by them, even though they have no children? */ Remove the expander, if you know the parent-/child-hierarchy at creation time</comment>
      <text xml:space="preserve">__NOTOC__
==Why do my nodes in the Explorer always have an expand-box by them, even though they have no children?==

Nodes are not asked for their child nodes until the user tries to expand them - to do otherwise would be very bad for performance.  If your Node is not supposed to have child nodes, use &lt;tt&gt;Children.LEAF&lt;/tt&gt; as the children object passed to the constructor.  That will eliminate the expand handle.

====Remove the expander, if you know the parent-/child-hierarchy at creation time====

(Taken from platform-dev mailinglist - author Mark J.Koch - mark@maehem.com)

In my case, our Nodes are backed by actual objects that know their own parent/child hierarchy. First we create our Nodes always as LEAF nodes by default and then set the children (if there are children) later. I have a method in my Node that get's called whenever our data model changes. First we check if we are already a LEAF node, and if we are, and we have children, we simply initialize the children. If we already have children, we check if our current data model has children here and either update our children keys or explicitly set Children.LEAF if there are no children.

This will properly make the expander disappear when there are no children.

&lt;pre&gt;
void myModelChanged() {
    if (this.isLeaf()) {
        if (getObject().hasChildren()) {
            initChildren();
        }
    } else {
        if (getObject().hasChildren()) {
            // Cause children to regenerate it's key list.
            this.getChildren().addNotify();
        } else {
            // We no longer have children. Change to leaf.
            setChildren(Children.LEAF);
        }
    }
} 
&lt;/pre&gt;</text>
    </revision>
  </page>
</mediawiki>
