<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqWindowsWstcrefAndFriends</title>
    <id>7526</id>
    <revision>
      <id>26310</id>
      <timestamp>2009-11-06T16:06:37Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <text xml:space="preserve">__NOTOC__
===What are the various window system file formats like &lt;tt&gt;.wstcref&lt;/tt&gt; and how do I use them?===

The window system on screen is composed of tabbed areas called "modes" (originally this was intended as "docking mode" as in the way a component is docked into the main window - yes, it's a lousy name).  These correspond to the class org.openide.windows.Mode.  In the [[DevFaqSystemFilesystem| system filesystem]], each Mode is represented by a folder.

At least in theory, a [[DevFaqWindowsTopComponent| TopComponent]] can exist in more than one [[DevFaqWindowsMode| Mode]], so there is a one-to-many relationship.  The pre-NetBeans 3.6 windowing system had a concept of "workspaces", and a Mode could be opened on multiple workspaces.  So instead of putting TopComponents (as represented by the .settings files) into the folders directly, you put those [[DevFaqDotSettingsFiles | settings files]] into the &lt;tt&gt;Windows2Local/Components&lt;/tt&gt; folder.  And you put a Window System Top Component Reference - or .wstcrf - lovely to pronounce - in the mode folder.  It's like a symbolic link, pointing to the [[DevFaqDotSettingsFiles| .settings]] file in the &lt;tt&gt;Windows2Local/Components&lt;/tt&gt; folder via its ID.  That way, one &lt;tt&gt;TopComponent&lt;/tt&gt; could be linked to by several &lt;tt&gt;Mode&lt;/tt&gt;s.

&lt;tt&gt;Mode&lt;/tt&gt;s have configuration data too, such as the constraints for where in the main window they should appear - what side, what TopComponent should be selected etc.  So for each &lt;tt&gt;Mode&lt;/tt&gt; defined in &lt;tt&gt;Windows2/Modes&lt;/tt&gt;, there is also a &lt;tt&gt;.wsmode&lt;/tt&gt; file that contains that information.

The system filesystem is read-write - so changed information (for example, the user dragged a tab to a different &lt;tt&gt;Mode&lt;/tt&gt; or opened or closed it) is saved to the user's settings directory, transparently.  On a restart, the saved information will be read in and restored.

So what happens is, if the user changes the position of windows, the selected tab, the splitter positions, etc., then new versions of the &lt;tt&gt;.settings&lt;/tt&gt;, &lt;tt&gt;.wsmode&lt;/tt&gt; or &lt;tt&gt;.wstcref&lt;/tt&gt; files will be saved in the userdir in order to restore the state on restart to how the user had configured it.

One handy way to generate all of those files, rather than doing it by hand, is to just create an action in your module that will open your &lt;tt&gt;TopComponent&lt;/tt&gt;.  Run it on a clean userdir, open your TopComponent, and put it where you want it to appear.  Shut down.  Go into your [[DevFaqUserDir| user dir]], and copy the files the IDE persisted into your module.  Edit to taste, add references in your module's layer file (any module that opens a component is a good example - try core/navigation) and voila.

You may want to look at the [[DevFaqSampleCode| samples]] - there are example modules that use all of the declarative window system APIs and file formats.</text>
    </revision>
  </page>
</mediawiki>
