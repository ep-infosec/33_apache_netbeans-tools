<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqTroubleshootClassNotFound</title>
    <id>7488</id>
    <revision>
      <id>26272</id>
      <timestamp>2009-11-06T16:02:57Z</timestamp>
      <contributor>
        <username>Admin</username>
        <id>1</id>
      </contributor>
      <text xml:space="preserve">__NOTOC__
===I got a &lt;tt&gt;ClassNotFoundException&lt;/tt&gt; or &lt;tt&gt;NoClassDefFoundError&lt;/tt&gt;. How can I fix it?===

The most likely explanation is that you have a problem in your dependencies.
In order for a class in one module to reference a class/interface defined in another module,
the following must be true:

# The class/interface being referenced must be visible to the code using it, according to the normal Java visibility rules. This typically means that the class must be public, since package-private access across modules is impossible.
# The package containing the class/interface must be ''exported'' (marked as providing an API visible to other modules). To "export" package, right click project, select Properties -&gt; API Versioning and choose either public or friend export type.
# The module containing the code which uses this class/interface must declare a dependency on the module which provides it.

These rules are pretty straightforward and it is easy in most cases to verify that dependencies are set up correctly.
If you receive a &lt;tt&gt;ClassNotFoundException&lt;/tt&gt; or &lt;tt&gt;NoClassDefFoundError&lt;/tt&gt; at runtime, the stack trace will generally lead you to the problem.

However, there are some cases where you will receive a &lt;tt&gt;ClassNotFoundException&lt;/tt&gt; or &lt;tt&gt;NoClassDefFoundError&lt;/tt&gt; at runtime,
but finding which modules need to declare dependencies on one another is more difficult because the stacktrace does not directly identify the code involved.
This occurs most frequently when you have library modules
(composed of JAR files which were compiled outside of the platform).
Although the dependencies were satisfied (by setting the classpath as needed) when the libraries were compiled,
the developer may not have correctly set these dependencies in the platform application which uses them.

In this case, you can often locate the problem by rebuilding the suite
and paying close attention to the output generated by the &lt;tt&gt;verify-class-linkage&lt;/tt&gt; task.
For example:

&lt;pre&gt;
verify-class-linkage: Warning: a.SomeImplementation cannot access b.publicapi.SomeInterface
&lt;/pre&gt;

This tells us that the module which provides &lt;tt&gt;SomeImplementation&lt;/tt&gt; needs to declare a dependency on the module which provides &lt;tt&gt;SomeInterface&lt;/tt&gt;.

For more background, see {{iz|145503}}.</text>
    </revision>
  </page>
</mediawiki>
