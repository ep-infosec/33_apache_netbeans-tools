<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqNodesCustomLookup</title>
    <id>7419</id>
    <revision>
      <id>40146</id>
      <timestamp>2010-07-24T19:02:08Z</timestamp>
      <contributor>
        <username>Jtulach</username>
        <id>526</id>
      </contributor>
      <text xml:space="preserve">__NOTOC__
===I need to add-to/remove-from/customize the content of my Node/DataObject/TopComponent's Lookup.  How do I do it?===

If it's just adding something, use
&lt;source lang="java"&gt;
return new ProxyLookup(
    new Lookup[] { 
      super.getLookup(), 
      Lookups.fixed(
            something, somethingElse) 
      });
&lt;/source&gt;

If there's only one object, substitute &lt;tt&gt;Lookups.singleton ( someObject )&lt;/tt&gt;.

If you need to change the content of the lookup on the fly, it's a little more complicated, but not too much.  Use the above
ProxyLookup technique if there's a Lookup returned by the superclass and you still want to use its content.
What you'll use to change content on the fly is the combination of &lt;tt&gt;AbstractLookup&lt;/tt&gt; (which, as fate would
have it, is not actually abstract), and &lt;tt&gt;InstanceContent&lt;/tt&gt;, which is a grab bag of stuff you can add to and
remove from.


The result will look something like this:

&lt;source lang="java"&gt;
class MyNode extends AbstractNode {
  private final InstanceContent lookupContents;
  public MyNode() {
    this(new InstanceContent());
  }
  private MyNode(InstanceContent ic) {
    super(Children.LEAF, new AbstractLookup(ic));
    this.lookupContents = ic;
  }
}
&lt;/source&gt;

When you need to change the contents of your lookup, you can call &lt;tt&gt;InstanceContent.add()&lt;/tt&gt; or and &lt;tt&gt;InstanceContent.remove()&lt;/tt&gt;, e.g.:

&lt;source lang="java"&gt;
lookupContents.add(someObject);
lookupContents.remove(someObject);
&lt;/source&gt;

Your lookup will be updated to include all items in the InstanceContent.

====Custom Lookup Contents with DataObjects====
DataObjects have a Lookup, but also use an older variant on the Lookup pattern, called a &lt;tt&gt;[http://bits.netbeans.org/dev/javadoc/org-openide-nodes/org/openide/nodes/CookieSet.html CookieSet]&lt;/tt&gt;.  Since this is a somewhat bewildering term, and &lt;tt&gt;CookieSet&lt;/tt&gt; will eventually be deprecated, you may want to avoid using it.  A &lt;tt&gt;CookieSet&lt;/tt&gt; ordinarily provides the &lt;tt&gt;Lookup&lt;/tt&gt; for a DataObject;  and certain APIs such as &lt;tt&gt;DataEditorSupport&lt;/tt&gt; require it.

However, it is possible to work with the more modern idioms of Lookup as described above, with a few caveats.  Such a DataObject typically looks like:
&lt;source lang="java"&gt;
public class FooDataObject extends MultiDataObject {
  private final Lookup lookup;
  private final InstanceContent lookupContents = new InstanceContent();
  public FooDataObject(FileObject pf, MultiFileLoader loader) throws DataObjectExistsException, IOException {
    super(pf, loader);
    lookup = new ProxyLookup(getCookieSet().getLookup(), new AbstractLookup(lookupContents));
    lookupContents.add (...whatever...);
  }

  @Override
  public Lookup getLookup() {
    return lookup;
  }

  @Override
  protected Node createNodeDelegate() {
    return new DataNode (this, Children.LEAF, getLookup());
  }
 //...
&lt;/source&gt;

You can then add and remove objects from your &lt;tt&gt;InstanceContent&lt;/tt&gt; and the &lt;tt&gt;DataObject&lt;/tt&gt; will behave as expected.  

'''Caveat 1: You really must override &lt;tt&gt;createNodeDelegate()&lt;/tt&gt;''' or otherwise (in your &lt;tt&gt;DataNode&lt;/tt&gt; subclass) pass your &lt;tt&gt;DataObject&lt;/tt&gt;'s &lt;tt&gt;Lookup&lt;/tt&gt; to your &lt;tt&gt;DataNode&lt;/tt&gt;'s constructor.  Otherwise its lookup will be &lt;tt&gt;getCookieSet().getLookup()&lt;/tt&gt; and nothing added to your &lt;tt&gt;InstanceContent&lt;/tt&gt; will appear in the &lt;tt&gt;Lookup&lt;/tt&gt; of your &lt;tt&gt;Node&lt;/tt&gt;.  So, ''if you use AbstractLookup in a DataObject, make sure its Node is really using your DataObject's Lookup''.

'''Caveat 2: A DataObject should always appear in its own Lookup''' &amp;mdash; If you are ''really sure'' that nothing is going to use your &lt;tt&gt;DataObject&lt;/tt&gt;'s &lt;tt&gt;CookieSet&lt;/tt&gt; at all, you can omit merging &lt;tt&gt;getCookieSet().getLookup()&lt;/tt&gt; into the &lt;tt&gt;ProxyLookup&lt;/tt&gt; in the constructor.  However, many things will not work correctly if ''the DataObject itself'' cannot be found in its own &lt;tt&gt;Lookup&lt;/tt&gt;.  If you are going to do that, replace &lt;tt&gt;getCookieSet().getLookup()&lt;/tt&gt; with &lt;tt&gt;Lookups.singleton(this)&lt;/tt&gt; to ensure it is present and cannot be removed or replaced.</text>
    </revision>
  </page>
</mediawiki>
