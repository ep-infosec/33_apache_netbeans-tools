<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqLookupDefault</title>
    <id>7373</id>
    <revision>
      <id>40172</id>
      <timestamp>2010-07-24T20:14:14Z</timestamp>
      <contributor>
        <username>Jtulach</username>
        <id>526</id>
      </contributor>
      <text xml:space="preserve">__NOTOC__
===What is the "default lookup"?===

The default lookup is &lt;tt&gt;Lookup.getDefault()&lt;/tt&gt;.
It is the registry for global singletons and instances of objects which have been registered in the system by modules.
(In JDK 6, &lt;tt&gt;ServiceLoader&lt;/tt&gt; operates on the same principle.)
The default lookup searches in two places:

* The [http://bits.netbeans.org/dev/javadoc/org-openide-util-lookup/org/openide/util/lookup/Lookups.html#metaInfServices(java.lang.ClassLoader) META-INF/services/ Lookup] contains all objects registered by modules via the [http://java.sun.com/j2se/1.4/docs/guide/extensions/ Java Extension Mechanism] - putting files in the &lt;tt&gt;META-INF/services/&lt;/tt&gt; directory of their module JARs (typically done using the [http://bits.netbeans.org/dev/javadoc/org-openide-util-lookup/org/openide/util/lookup/ServiceProvider.html &lt;tt&gt;@ServiceProvider&lt;/tt&gt;] annotation)
* The contents of the &lt;tt&gt;Services/&lt;/tt&gt; folder of the [[DevFaqSystemFilesystem|System (configuration) Filesystem]] (this is harder and somewhat deprecated)

Objects contained in the default lookup are instantiated lazily when first requested.  Objects returned by the default lookup ''may'' (or may not) be garbage collected if they become unreferenced.

Here is the usual usage pattern:

1. A central "controller" module defines some interface, e.g.

&lt;source lang="java"&gt;
package controller.pkg;
public interface MyService {
    void doSomething();
}
&lt;/source&gt;

2. Each module which wants to implement that service depends on the controller module which defines the interface, and creates and registers an implementation:

&lt;source lang="java"&gt;
@ServiceProvider(service=MyService.class)
public class MyImpl implements MyService {
    public void doSomething() {....}
}
&lt;/source&gt;

It is also possible to declaratively mask other people's implementations and declaratively order implementations so some will take precedence.

3. The controller finds all implementations and uses them somehow:

&lt;source lang="java"&gt;
for (MyService s : Lookup.getDefault().lookupAll(MyService.class)) {
    s.doSomething();
}
&lt;/source&gt;

===More About Lookup===
* [[DevFaqLookup]]
* [http://bits.netbeans.org/dev/javadoc/usecases.html#usecase-Utilities Extension Points Tutorial] 
* [http://bits.netbeans.org/dev/javadoc/org-openide-util-lookup/org/openide/util/Lookup.html Javadoc for Lookup]

----

Applies to: NetBeans 6.7 and later</text>
    </revision>
  </page>
</mediawiki>
