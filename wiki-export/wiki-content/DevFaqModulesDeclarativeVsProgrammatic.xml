<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqModulesDeclarativeVsProgrammatic</title>
    <id>7398</id>
    <revision>
      <id>34257</id>
      <timestamp>2010-02-18T19:38:16Z</timestamp>
      <contributor>
        <username>Tboudreau</username>
        <id>108</id>
      </contributor>
      <comment>/* Installing things declaratively as opposed to programmatically */</comment>
      <text xml:space="preserve">__NOTOC__
===Installing things declaratively as opposed to programmatically===

Long ago, in a galaxy far far away, most objects in NetBeans were created during startup.  That works fine for a small application.  It is disaster for a large application - with each new component in the system, startup time gets longer, garbage collections get more frequent and memory requirements rise.

Because of this, today, most of the APIs you will use to install things into the the IDE or a [http://platform.netbeans.org/ NetBeans Platform-based application] involve a text entry of some sort,
such as [[DevFaqModulesLayerFile| putting something in an XML file]]), or a plain-text file naming some classes in your JAR file's &lt;code&gt;META-INF/services&lt;/code&gt; directory &amp;mdash; ''not'' running Java code.
'''A well-behaved module should do nothing on startup.'''

The main ways to accomplish this goal are to use either the [http://bits.netbeans.org/dev/javadoc/org-openide-util-lookup/org/openide/util/lookup/ServiceProvider.html &lt;tt&gt;@ServiceProvider&lt;/tt&gt;] annotation (which generates the aforementioned &lt;code&gt;META-INF/services&lt;/code&gt; files at compile-time), or by registering files or objects in your module's [[DevFaqModulesLayerFile| XML layer file]].  As of NetBeans 6.9, there are [http://wiki.apidesign.org/wiki/CompileTimeCache a number of annotations] which can be used to generate the this XML data at compile-time. 

Using declarative mechanisms, your objects will be instantiated when they are needed to do actual work.  Until something really needs to call them, they don't need to be created and their classes are not loaded.

If you really need to run some code on startup, create a subclass of &lt;code&gt;[http://bits.netbeans.org/dev/javadoc/org-openide-modules/org/openide/modules/ModuleInstall.html ModuleInstall]&lt;/code&gt;

[[DevFaqWhenToUseWhatRegistrationMethod| More about registration mechanisms]]
----

Applies to: NetBeans 6.7 and later</text>
    </revision>
  </page>
</mediawiki>
