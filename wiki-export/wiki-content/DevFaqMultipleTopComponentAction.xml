<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqMultipleTopComponentAction</title>
    <id>15376</id>
    <revision>
      <id>36597</id>
      <timestamp>2010-03-11T15:01:05Z</timestamp>
      <contributor>
        <username>Tboudreau</username>
        <id>108</id>
      </contributor>
      <comment>Initial content</comment>
      <text xml:space="preserve">__NOTOC__
==I have a non-singleton TopComponent. Can I write actions which show all available instances in the main menu?==

Some people applications where there is one primary kind of window component - an editor of some kind, or something that visualizes some data.  There may be several such components open at any time, and they all are just instances of the same TopComponent subclass which are showing different data.

In this case, it can be useful to list all such components in the main menu, to facilitate switching between components.  This involves three steps:
# Track all opened instances of the TopComponent subclass
# Write an Action which provides an array of menu items, one for each TopComponent instance
# Register that action in one of the main window menus

====Tracking TopComponents And Creating Actions For Them====

Keeping track of all of the instances of our TopComponent subclass is simple.  Whenever a new one is constructed, we will just add it to a list.  There are only two caveats:
* We do not want memory leaks, so we should use a &lt;tt&gt;[http://java.sun.com/javase/6/docs/api/java/lang/ref/WeakReference.html WeakReference]&lt;/tt&gt;.  That way a component which has been closed can be garbage collected
* It is not guaranteed that, during restart, previously opened components will be deserialized on the event thread (though they should be).  So the list should be synchronized

We will add a static method which creates a list of &lt;tt&gt;[http://java.sun.com/javase/6/docs/api/javax/swing/Action.html Action]&lt;/tt&gt;s suitable for use with standard Swing &lt;tt&gt;[http://java.sun.com/javase/6/docs/api/javax/swing/JMenuItem.html JMenuItem]&lt;/tt&gt;s.

&lt;pre&gt;
//Helper annotation to allow our component to be remembered across restarts.
//The DTD does not have to be defined, it just needs to be a unique name
@ConvertAsProperties(dtd = "-//org.netbeans.demo.multitopcomponent//MultiTopComponent//EN", autostore = false)
public class MultiTopComponent extends TopComponent {
  //A index for our display name, so we can tell the components apart

  static int ix;
  //Keep a list of all components we create.  Synchronize it because
  //they could be deserialized on some random thread;  use WeakReferences
  //so we don't hold a closed TopComponent in memory if it will never
  //be used again
  private static List&lt;Reference&lt;TopComponent&gt;&gt; all =
          Collections.synchronizedList(
          new ArrayList&lt;Reference&lt;TopComponent&gt;&gt;());

  public MultiTopComponent() {
    setDisplayName("Component " + ix++);
    all.add(new WeakReference&lt;TopComponent&gt;(this));
    setLayout(new BorderLayout());
    add(new JLabel(getDisplayName()), BorderLayout.CENTER);
  }

  public static List&lt;Action&gt; allActions() {
    List&lt;Action&gt; result = new ArrayList&lt;Action&gt;();
    for (Iterator&lt;Reference&lt;TopComponent&gt;&gt; it = all.iterator(); it.hasNext();) {
      Reference&lt;TopComponent&gt; tc = it.next();
      TopComponent comp = tc.get();
      if (comp == null) {
        it.remove();
      } else {
        result.add(new ShowAction(comp.getDisplayName(), tc));
      }
    }
    return result;
  }

  private static final class ShowAction extends AbstractAction {
    //Our action should not hold a strong reference to the TopComponent -
    //if it is closed, it should get garbage collected.  If a menu
    //item holds a reference to the component, then it won't be

    private final Reference&lt;TopComponent&gt; tc;

    public ShowAction(String name, Reference&lt;TopComponent&gt; tc) {
      this.tc = tc;
      putValue(NAME, name);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
      TopComponent comp = tc.get();
      if (comp != null) { //Could have been garbage collected
        comp.requestActive();
      } else {
        //will almost never happen
        Toolkit.getDefaultToolkit().beep();
      }
    }

    @Override
    public boolean isEnabled() {
      TopComponent comp = tc.get();
      return comp != null &amp;&amp; comp.isOpened();
    }
  }

  @Override
  public int getPersistenceType() {
    return PERSISTENCE_ONLY_OPENED;
  }

  void readProperties(java.util.Properties p) {
    setDisplayName(p.getProperty("name"));
  }

  void writeProperties(java.util.Properties p) {
    p.setProperty("name", getDisplayName());
  }
}&lt;/pre&gt;

This class contains ''persistence'' code - particularly the &lt;tt&gt;[http://bits.netbeans.org/dev/javadoc/org-netbeans-modules-settings/org/netbeans/api/settings/ConvertAsProperties.html @ConvertAsProperties]&lt;/tt&gt; annotation and the methods &lt;tt&gt;readProperties()&lt;/tt&gt;&lt;tt&gt;writeProperties()&lt;/tt&gt; and &lt;tt&gt;getPersistenceType()&lt;/tt&gt;.  These methods save some information about our TopComponent to disk on shutdown, in the form of a &lt;tt&gt;[http://java.sun.com/javase/6/docs/api/java/util/Properties.html Properties]&lt;/tt&gt; object.  If we do not want our components to be reopened after an application restart, we can just return &lt;tt&gt;PERSISTENCE_NEVER&lt;/tt&gt; from &lt;tt&gt;getPersistenceType()&lt;/tt&gt;, and delete the other persistence-related methods and the annotation.  Note that you can omit the &lt;tt&gt;*Properties()&lt;/tt&gt; methods and the annotation, and the components ''will'' be reopened on startup&amp;mdash;but without persistence code, this is done by serializing the whole component to disk, which is both slower and stores more data than necessary.  Typically, for an editor component, just storing the path to the file being edited is enough.

====Writing an Action which provides an array of menu items====
The &lt;tt&gt;[http://bits.netbeans.org/dev/javadoc/org-openide-awt/org/openide/awt/DynamicMenuContent.html DynamicMenuContent]&lt;/tt&gt; interface allows an Action to act as a factory for menu items - to control what components are shown in a menu to represent it.  It also allows a single action to produce multiple menu items.

Here we will create an action which produces an array of menu items.  All of them will be shown inline in the main menu:
&lt;pre&gt;public class MultiComponentAction extends AbstractAction implements DynamicMenuContent {

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new AssertionError("Should never be called");
    }

    @Override
    public JComponent[] getMenuPresenters() {
        List&lt;Action&gt; actions = MultiTopComponent.allActions();
        List&lt;JComponent&gt; result = new ArrayList&lt;JComponent&gt;(actions.size());
        for (Action a : actions) {
            result.add (new JMenuItem(a));
        }
        return result.toArray(new JComponent[result.size()]);
    }

    @Override
    public JComponent[] synchMenuPresenters(JComponent[] jcs) {
        //We could iterate all of our JMenuItems from the previous call to
        //getMenuPresenters() here, weed out those for dead TopComponents and
        //add entries for newly created TopComponents here
        return getMenuPresenters();
    }
}&lt;/pre&gt;

This will create an ''inline'' array of menu items, not a submenu.  If you want a submenu instead, then implement &lt;tt&gt;getMenuPresenters()&lt;/tt&gt; as follows:
&lt;pre&gt;
        List&lt;Action&gt; actions = MultiTopComponent.allActions();
        JMenu menu = new JMenu("Multi TopComponents");
        for (Action a : actions) {
            menu.add (a);
        }
        return new JComponent[] { menu };
&lt;/pre&gt;

====Registering The Action====
Now we just need to actually add our multi-item action to the main menu, by registering it in our module's [[DevFaqModulesLayerFile| XML layer]].

In this example, we register it in the &lt;tt&gt;Actions/Window&lt;/tt&gt; folder and then create a link in the Window menu folder using a [[DevFaqDotShadowFiles| .shadow file]].  Note that we could simply put the [[DevFaqInstanceDataObject| .instance file]] directly in the &lt;tt&gt;Menu/Window&lt;/tt&gt; folder, but this approach is the preferred practice:

&lt;pre&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE filesystem PUBLIC 
     &amp;quot;-//NetBeans//DTD Filesystem 1.1//EN&amp;quot; 
     &amp;quot;http://www.netbeans.org/dtds/filesystem-1_1.dtd&amp;quot;&amp;gt;
&amp;lt;filesystem&amp;gt;
    &amp;lt;folder name=&amp;quot;Actions&amp;quot;&amp;gt;
        &amp;lt;folder name=&amp;quot;Window&amp;quot;&amp;gt;
            &amp;lt;file name=&amp;quot;org-netbeans-demo-multitopcomponent-MultiComponentAction.instance&amp;quot;&amp;gt;
                &amp;lt;attr name=&amp;quot;position&amp;quot; intvalue=&amp;quot;230&amp;quot;/&amp;gt;
            &amp;lt;/file&amp;gt;
        &amp;lt;/folder&amp;gt;
    &amp;lt;/folder&amp;gt;
    &amp;lt;folder name=&amp;quot;Menu&amp;quot;&amp;gt;
        &amp;lt;folder name=&amp;quot;Window&amp;quot;&amp;gt;
            &amp;lt;!-- This is the action that actually shows all available components --&amp;gt;
            &amp;lt;file name=&amp;quot;MultiComponent.shadow&amp;quot;&amp;gt;
                &amp;lt;attr name=&amp;quot;position&amp;quot; intvalue=&amp;quot;230&amp;quot;/&amp;gt;
                &amp;lt;attr name=&amp;quot;originalFile&amp;quot; 
                stringvalue=&amp;quot;Actions/Window/org-netbeans-demo-multitopcomponent-MultiComponentAction.instance&amp;quot;/&amp;gt;
            &amp;lt;/file&amp;gt;
        &amp;lt;/folder&amp;gt;
    &amp;lt;/folder&amp;gt;
&amp;lt;/filesystem&amp;gt;
&lt;/pre&gt;</text>
    </revision>
  </page>
</mediawiki>
