<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqDropdownMenuAddToolbarEnabled</title>
    <id>7248</id>
    <revision>
      <id>40191</id>
      <timestamp>2010-07-24T20:35:21Z</timestamp>
      <contributor>
        <username>Jtulach</username>
        <id>526</id>
      </contributor>
      <text xml:space="preserve">__NOTOC__
==How do I add a dropdown menu to toolbar that is selectively enabled/disabled?==

Create an Action as described in [[DevFaqDropdownMenuAddToolbar| the general FAQ for to add a dropdown menu to a toolbar]].

In this case, your action also needs to implement [http://bits.netbeans.org/dev/javadoc/org-openide-util/org/openide/util/ContextAwareAction.html ContextAwareAction].  A ContextAwareAction is a factory for other Action instances which are tied to a specific Lookup (so that, if selection changes after the popup menu for a Node is shown, the Action does not operate on the wrong object).  You can start with a subclass of javax.swing.AbstractAction, and you will need two constructors:

&lt;source lang="java"&gt;
private final Lookup lookup;
public MyAction() {
  this (Utilities.actionsGlobalContext());
}

private MyAction(Lookup lookup) {
  this.lookup = lookup;
  Icon icon = ImageUtilities.image2Icon(
    ImageUtilities.loadImage("com/foo/icon.gif"));
  putValue(SMALL_ICON, icon);
  //set the initial enabled state
  setEnabled(false);
}&lt;/source&gt;

You will also need to implement the one method of ContextAwareAction:
&lt;source lang="java"&gt;
public Action createContextAwareInstance(Lookup actionContext) {
  return new MyAction(actionContext);
}
&lt;/source&gt;

To enable and disable the action, we will need to listen on the lookup for the presence or absence of some object type.  If it is there, the action will be enabled;  if it is not, it will be disabled.

Since we do not want to start listening on the global selection context until something actually cares whether the action is enabled or not, so we will override add/removePropertyChangeListener() to notice that and listen or not.

First, we must modify our class signature to implement LookupListener:
&lt;source lang="java"&gt;
public class MyAction extends AbstractAction implements ContextAwareAction, LookupListener, Presenter.Toolbar {
...&lt;/source&gt;

Now we will handle listening on the Lookup.Result.  We want to stop listening to it when there are no PropertyChangeListeners left, so that our action can be garbage collected if not in use:
&lt;source lang="java"&gt;
private LookupResult&lt;? extends DataObject&gt; res;

@Override
public synchronized void addPropertyChangeListener(PropertyChangeListener l) {
  boolean startListening = getPropertyChangeListeners().length == 0;
  super.addPropertyChangeListener(l);
  if (startListening) {
    res = lookup.lookupResult(MyType.class);
    res.addLookupListener(this);
  }
}

@Override
public synchronized void removePropertyChangeListener(PropertyChangeListener l) {
  super.removePropertyChangeListener(l);
  if (getPropertyChangeListeners().length == 0) {
    res.removeLookupListener(this);
    res = null;
  }
}
&lt;/source&gt;
Now comes the actual implementation of LookupListener:
&lt;source lang="java"&gt;
public void resultChanged(LookupEvent ev) {
  setEnabled(!res.allItems().isEmpty());
}
&lt;/source&gt;

A bit of bookkeeping is required in getToolbarPresenter() - at least until [https://netbeans.org/bugzilla/show_bug.cgi?id=179814 issue 179814] is fixed, we will need to manually enable/disable the actions for our menu items:
&lt;source lang="java"&gt;
  private final Set&lt;Action&gt; popupMenuActions = new WeakSet&lt;Action&gt;();
  @Override
  public Component getToolbarPresenter() {
    JPopupMenu menu = new JPopupMenu();
    Action actionOne = new DemoMenuAction("One");
    Action actionTwo = new DemoMenuAction("Two");
    menu.add(new JMenuItem(actionOne));
    menu.add(new JMenuItem(actionTwo));
    popupMenuActions.add(actionOne);
    popupMenuActions.add(actionTwo);
    //add action listeners to the menu items to do what you want
    Icon icon = (Icon) getValue(SMALL_ICON);
    JButton result = DropDownButtonFactory.createDropDownButton(icon, menu);
    result.setAction(this);
    return result;
  }

  @Override
  public void setEnabled(boolean enabled) {
    super.setEnabled(enabled);
    for (Action a : popupMenuActions) {
      if (a != null) { //WeakSet iterator can return null
        a.setEnabled(enabled);
      }
    }
  }

  private class DemoMenuAction extends AbstractAction {
    DemoMenuAction(String name) {
      putValue(NAME, name);
      setEnabled (MyAction.this.isEnabled());
    }

    @Override
    public void actionPerformed(ActionEvent e) {
      DataObject ob = res.allInstances().iterator().next();
      DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message(
              ob.getName()));
    }
  }&lt;/source&gt;

If we want the drop-down button to do something when it is clicked on the right side (not in the popup area with the down-arrow), we can implement actionPerformed(ActionEvent) to do whatever that is.

For an older detailed example of manually creating a context-aware drop-down toolbar button (without DropDownButtonFactory, circa NetBeans 6.0), see [http://article.gmane.org/gmane.comp.java.netbeans.modules.openide.devel/35436 see this post], posted in [http://thread.gmane.org/gmane.comp.java.netbeans.modules.openide.devel/35424 on the old dev@openide NetBeans mailing lists].</text>
    </revision>
  </page>
</mediawiki>
