<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqWindowsGeneral</title>
    <id>7518</id>
    <revision>
      <id>51733</id>
      <timestamp>2012-02-16T12:52:35Z</timestamp>
      <contributor>
        <username>Cvdenzen</username>
        <id>13196</id>
      </contributor>
      <minor/>
      <comment>/* What is the Window System? */</comment>
      <text xml:space="preserve">__NOTOC__
===What is the Window System?===
The windowing system is what creates the main application window, and makes it
possible to open components in the UI.  The API for the windowing system is in the package
&lt;tt&gt;org.openide.windows&lt;/tt&gt;.  The implementation of the windowing system is in the module
&lt;tt&gt;org.netbeans.core.windows&lt;/tt&gt; (core.windows in Mercurial repository, was core/windows in CVS).

The window system defines [[DevFaqWindowsMode| Mode]]s which are places in the main window
occupied by tabbed containers.  [[DevFaqWindowsTopComponents| TopComponent]]s are GUI
components (instances or subclasses of &lt;tt&gt;org.openide.windows.TopComponent&lt;/tt&gt; which
can be put into these tabbed containers.

There is a [[DevFaqModulesDeclarativeVsProgrammatic| programmatic API]] for creating/opening
TopComponents - this is useful for testing components under development - just create an Action which
calls &lt;tt&gt;new MyTopComponent().open()&lt;/tt&gt; to quickly try out GUI components.

However, the main API modules use the [[DevFaqWindowsWstcrefAndFriends| declarative XML Window System API]] to install their components, for the following reasons:

* Scalability: Components do not need to be created/deserialized unless they really need to be opened
* Singletonization:  You wouldn't want to have 5 Projects tabs in the IDE.  Using the XML API correctly, you can easily refer to the singleton instance of your component once it's instantiated (almost) for free.
* Persistence: The window system associates components with unique IDs;  to properly persist your component across sessions, you need to use the XML APIs</text>
    </revision>
  </page>
</mediawiki>
