<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqNonSingletonTopComponents</title>
    <id>7426</id>
    <revision>
      <id>56946</id>
      <timestamp>2012-09-18T10:54:57Z</timestamp>
      <contributor>
        <username>Cvdenzen</username>
        <id>13196</id>
      </contributor>
      <minor/>
      <comment>/* If you already have a generated singleton TopComponent subclass */</comment>
      <text xml:space="preserve">__NOTOC__
===How can I change my TopComponent to not be a singleton (NB version up to 6.9)?===
The "New Window Component" wizard in the NetBeans IDE generates a [http://en.wikipedia.org/wiki/Singleton_pattern singleton] TopComponent.  That's fine for windows that there should only be one of.  Particularly if you are [[DevFaqEditorTopComponent|creating some kind of editor]], you will want to create multiple instances of your TopComponent.
====The really easy way====
If you have not already used the '''New Window''' template to create your TopComponent subclass, don't.

Instead, use ''New &amp;gt; JPanel Form''.  Once the new JPanel is created, switch to the Code tab, and replace &lt;tt&gt;extends javax.swing.JPanel&lt;/tt&gt; with &lt;tt&gt;extends TopComponent&lt;/tt&gt;.  Then do the following things:
* Override &lt;tt&gt;getPersistenceType()&lt;/tt&gt;.  
** If you ''do not'' want your components reopened on restart
***return &lt;tt&gt;PERSISTENCE_NEVER&lt;/tt&gt;&amp;mdash;that is all you need to do to make sure they are not preserved across restarts.
** If you ''do'' want your components reopened on restart, then
*** return &lt;tt&gt;PERSISTENCE_ONLY_OPENED&lt;/tt&gt; from &lt;tt&gt;getPersistenceType()&lt;/tt&gt;
*** Add the following slightly-cryptic annotation to the class: &lt;tt&gt;@ConvertAsProperties(dtd = "-//com.yourmodule.yourpackage//YourTopComponent//EN", autostore = false)&lt;/tt&gt;, replacing the package and class name with your own.  This identifies a DTD.  You do not need to define the DTD.  You just need to give it a unique namespace that nothing else is using.  Package and class name work well for that.
*** Add two additional methods (you are not overriding anything and they can be package-private, like serialization methods):
**** &lt;tt&gt;void writeProperties(Properties p)&lt;/tt&gt; - here we will call &lt;tt&gt;p.put()&lt;/tt&gt; passing enough information to reconstruct your component on restart.  If we are editing a file, we might save the path to the file.  If we are viewing a URL, we might save the URL.  If we want to be particularly fastidious, we might save the scroll position, or what line the editor caret was on , or anything else useful to restore the state of our component.
**** &lt;tt&gt;void readProperties(Properties p)&lt;/tt&gt; - here we will reading whatever keys we wrote out in &lt;tt&gt;writeProperties&lt;/tt&gt; and (re)initializing the component to its pre-shutdown state.  This method will be called on startup to restore our component to its pre-shutdown state as best can be done.  If we were, say, editing a file that no longer exists, the appropriate thing to do is throw an exception.  

====If you already have a generated singleton TopComponent subclass====
The good news is that you won't have to write any code -- you'll just have to delete some of the code that was generated for you.

In your TopComponent's .java source file:
* Delete the static &lt;tt&gt;instance&lt;/tt&gt; variable, which ought to be declared a few lines above the constructor.
* Make sure your TopComponent class is &lt;tt&gt;public&lt;/tt&gt;
* Make sure your TopComponent has a no-argument constructor which is &lt;tt&gt;public&lt;/tt&gt;
* Delete the &lt;tt&gt;getDefault()&lt;/tt&gt; method (typically somewhere around the middle of the file)
* Delete the &lt;tt&gt;findInstance()&lt;/tt&gt; method (which typically follows the &lt;tt&gt;getDefault()&lt;/tt&gt; method)
* Update the persistence code which saves your component's state on shutdown and restores it on restart to reopen your component as follows
** Locate the &lt;tt&gt;getPersistenceType&lt;/tt&gt; method and change its return value to either &lt;tt&gt;[http://bits.netbeans.org/dev/javadoc/org-openide-windows/org/openide/windows/TopComponent.html#PERSISTENCE_NEVER TopComponent.PERSISTENCE_NEVER]&lt;/tt&gt; or &lt;tt&gt;[http://bits.netbeans.org/dev/javadoc/org-openide-windows/org/openide/windows/TopComponent.html#PERSISTENCE_ONLY_OPENED TopComponent.PERSISTENCE_ONLY_OPENED]&lt;/tt&gt; (see below for why).
** If you have methods called &lt;tt&gt;writeReplace()&lt;/tt&gt;and an inner class called &lt;tt&gt;ResolvableHelper&lt;/tt&gt; (NetBeans 6.8 and earlier):
*** Delete the &lt;tt&gt;writeReplace()&lt;/tt&gt; method (typically towards the end of the file)
*** Delete the &lt;tt&gt;ResolvableHelper&lt;/tt&gt; inner class (typically towards the end of the file)
** If you ''do not want persistence across restarts'' &amp;mdash; you are returning PERSISTENCE_NEVER from &lt;tt&gt;getPersistenceType()&lt;/tt&gt;
*** If you have a &lt;tt&gt;@ConvertAsProperties&lt;/tt&gt; annotation and &lt;tt&gt;readProperties(Properties)&lt;/tt&gt; and &lt;tt&gt;writeProperties(Properties)&lt;/tt&gt; methods, delete the annotation and both methods
** If ''do want persistence across restarts'' &amp;mdash; you are returning &lt;tt&gt;PERSISTENCE_ONLY_OPENED&lt;/tt&gt; from&lt;tt&gt;getPersistenceType()&lt;/tt&gt;
*** If you already have the &lt;tt&gt;@ConvertAsProperties&lt;/tt&gt; annotation and &lt;tt&gt;readProperties(Properties)&lt;/tt&gt; and &lt;tt&gt;writeProperties(Properties)&lt;/tt&gt; methods just leave them there
*** If you do not have the annotation and those methods, implement them as described in the previous section

Next we will need to delete the metadata that registers the component:
* For version 6.9 of NetBeans:
** Delete the settings XML file for your component.  If your component class is &lt;tt&gt;MyWindow&lt;/tt&gt; then that file will be in the same folder and will be called &lt;tt&gt;MyWindowSettings.xml&lt;/tt&gt;.
** Delete the [[DevFaqWindowsWstcrefAndFriends| wstcrf]] (&amp;quot;window system TopComponent reference&amp;quot;) XML file in that folder.  If your component class is &lt;tt&gt;MyWindow&lt;/tt&gt; then that file will be named &lt;tt&gt;MyWindowWstcrf.xml&lt;/tt&gt;
** Edit your module's [DevFaqModulesLayerFile| layer.xml file] to 
*** Remove any references to either of these files (just use Ctrl-F to search for e.g. &lt;tt&gt;MyWindowSettings.xml&lt;/tt&gt; and &lt;tt&gt;MyWindowWstcrf.xml&lt;/tt&gt;).  They will be in &lt;tt&gt;&amp;lt;file&amp;gt;&lt;/tt&gt; tags.
*** If you have removed a &lt;tt&gt;&amp;lt;file&amp;gt;&lt;/tt&gt; entry, and it was the only entry in that folder, you can remove the XML for parent folder (and its parent if it is now empty, and so forth)
*** Find where an Action is registered for to open your (formerly) singleton TopComponent
**** ''NetBeans 6.9 and later:''  
***** Look for an &lt;tt&gt;&amp;lt;file&amp;gt;&lt;/tt&gt; registered in &lt;tt&gt;Actions/Window&lt;/tt&gt;in the XML file.  It will have an &lt;tt&gt;&amp;lt;attr&amp;gt;&lt;/tt&gt; element that refers to your TopComponent class, e.g. &lt;tt&gt;&amp;lt;attr name=&amp;quot;component&amp;quot; methodvalue=&amp;quot;com.foo.MyWindow.findInstance&amp;quot;/&amp;gt;&lt;/tt&gt;.  Delete the entire &lt;tt&gt;&amp;lt;file&amp;gt;&lt;/tt&gt; entry.
***** Look for &lt;tt&gt;&amp;lt;file&amp;gt;&lt;/tt&gt; entry for a &lt;tt&gt;.shadow&lt;/tt&gt; file in &lt;tt&gt;Actions/Menu&lt;/tt&gt; in the XML, with its &lt;tt&gt;originalFile&lt;/tt&gt; pointing to the file entry you just deleted.  Delete the &lt;tt&gt;.shadow&lt;/tt&gt; &lt;tt&gt;&amp;lt;file&amp;gt;&lt;/tt&gt; too.
**** ''NetBeans 6.8 and earlier:''  
***** There will be an &lt;tt&gt;Action&lt;/tt&gt; class in your sources which is registered, e.g. &lt;tt&gt;MyWindowAction.java&lt;/tt&gt;.  Delete the java source file.
***** Look for an &lt;tt&gt;&amp;lt;file&amp;gt;&lt;/tt&gt; registered in &lt;tt&gt;Actions/Window&lt;/tt&gt;in the XML file.  It will be a &lt;tt&gt;&amp;lt;file&amp;gt;&lt;/tt&gt; whose name is the munged fully-qualified class name of the &lt;tt&gt;Action&lt;/tt&gt; you just deleted, e.g. &lt;tt&gt;com-foo-MyWindowAction.instance&lt;/tt&gt;.  Delete the &lt;tt&gt;&amp;lt;file&amp;gt;&lt;/tt&gt; entry for it
***** Look for &lt;tt&gt;&amp;lt;file&amp;gt;&lt;/tt&gt; entry for a &lt;tt&gt;.shadow&lt;/tt&gt; file in &lt;tt&gt;Actions/Menu&lt;/tt&gt; in the XML, with its &lt;tt&gt;originalFile&lt;/tt&gt; pointing to the file entry you just deleted.  Delete the &lt;tt&gt;.shadow&lt;/tt&gt; &lt;tt&gt;&amp;lt;file&amp;gt;&lt;/tt&gt; too.

====Creating And Opening Your TopComponents====

Now that you have deleted the actions for your TopComponent, presumably they will be created some other way (for example, from a file's popup menu).  You can create new instances of your TopComponent, open them and give them focus as follows:
 TopComponent win = new MyTopComponent();
 win.open();
 win.requestActive(); 
If you wrote your persistence code correctly, your components will magically reopen on restart with no further work.

====What About PERSISTENCE_ALWAYS?====
There is one other value you can return from &lt;tt&gt;[http://bits.netbeans.org/dev/javadoc/org-openide-windows/org/openide/windows/TopComponent.html#getPersistenceType() TopComponent.getPersistenceType()]&lt;/tt&gt;.  That value is &lt;tt&gt;TopComponent.PERSISTENCE_ALWAYS&lt;/tt&gt;.

While it is ''legal'' to return this value from a non-singleton TopComponent, it is almost never what you want to do.  What will happen if you do this is:
* Every instance of your component that is '''ever created''' will be persisted on shutdown, ''forever''
** Even if it is closed
** Even if nothing can use it, or it represents a file that was deleted, or is in some other way invalid
** Even if no code will ever be able to find it and open it again
* One every restart, ''forever''
** Every instance of your component that has ''ever existed'' will be read back from disk
*** Each one will slow down startup a little bit
*** Each one will be wasting disk space

&lt;tt&gt;PERSISTENCE_ALWAYS&lt;/tt&gt; is for singleton components that need to be remembered forever across restarts. Don't use it for non-singletons.
====If you do not have any persistence code, but your components are reopening on restart...====
You are returning either &lt;tt&gt;PERSISTENCE_ONLY_OPENED&lt;/tt&gt; or &lt;tt&gt;PERSISTENCE_ALWAYS&lt;/tt&gt; from &lt;tt&gt;getPersistenceType()&lt;/tt&gt;.  If there is no persistence code, but you ''are'' returning one of these values, NetBeans will use plain old Java serialization to store and reload your component.

Either use &lt;tt&gt;PERSISTENCE_NEVER&lt;/tt&gt; or write persistence code as described above.  Serialization is slower and more fragile than proper persistence, and is never a good option for production code.</text>
    </revision>
  </page>
</mediawiki>
