<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqRequestProcessor</title>
    <id>7453</id>
    <revision>
      <id>34858</id>
      <timestamp>2010-03-03T22:04:22Z</timestamp>
      <contributor>
        <username>Braiam</username>
        <id>3851</id>
      </contributor>
      <minor/>
      <text xml:space="preserve">__NOTOC__
===When should I use RequestProcessor.getDefault() and when should I create my own RequestProcessor?===

&lt;tt&gt;RequestProcessor.getDefault()&lt;/tt&gt; is tempting to use, but it is also dangerous.  This FAQ item will tell you when '''not''' to use it.

One of the most common threading bugs in NetBeans happens like this:
* Someone needs to run a background operation, so they use [http://bits.netbeans.org/dev/javadoc/org-openide-util/org/openide/util/RequestProcessor.html#getDefault() &lt;tt&gt;RequestProcessor.getDefault()&lt;/tt&gt;, the global thread pool
* They don't realize that it is possible for either that code to be called repeatedly (by the user, in a loop or whatever)
* The background work can take some time to run
* A user notices that NetBeans is slow, takes a thread dump, and there are 40 background threads all doing the same thing at the same time

&lt;tt&gt;RequestProcessor&lt;/tt&gt; has a constructor argument for its ''throughput''.  That says how many threads this &lt;tt&gt;RequestProcessor&lt;/tt&gt; is allowed to use at the same time. When you call &lt;tt&gt;new RequestProcessor("Useful name for thread dump", 3)&lt;/tt&gt; you are creating a thread pool that can have 3 threads available to run things on simultaneously.

'''The throughput of &lt;tt&gt;RequestProcessor.getDefault()&lt;/tt&gt; is &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;'''.  Think about what that means:  it can potentially create thousands of threads;  but your OS cannot necessarily handle thousands of threads, and you probably don't have thousands of CPUs.  More threads than CPUs means the OS does extra work time-slicing between the threads and things get slower, not faster.

&lt;tt&gt;RequestProcessor.getDefault()&lt;/tt&gt; is useful for ''one-off'' operations - you have some situation that happens once in a great while, and, say, while constructing some object, you need to do some work in the background;  that work will probably never need to be done again for the life of the Java VM.  That's a perfect case for &lt;tt&gt;RequestProcessor.getDefault()&lt;/tt&gt;.

Now here is the '''anti-example''':  You are creating a &lt;tt&gt;[http://bits.netbeans.org/dev/javadoc/org-openide-nodes/org/openide/nodes/Node.html Node]&lt;/tt&gt; that represents a file.  It needs to mark itself with an error badge and color its text in red if the file contains errors.  You can't read the file when you create the Node - that takes too long.  So when the node is created, it runs a background task to check its status, and updates its icon and display name after it has read the file.  Now imagine you did this with &lt;tt&gt;RequestProcessor.getDefault()&lt;/tt&gt;.  What happens when the user expands a folder that contains 1000 of your files?  1000 threads get created, and the whole application gets very, very slow.  For that, you are much better off creating one new &lt;tt&gt;RequestProcessor&lt;/tt&gt; and using it for all your nodes.  The FAQ entry about &lt;tt&gt;[[DevFaqRequestProcessorTask| RequestProcessor.Task]]&lt;/tt&gt; shows how to do this correctly.

If you create your own RequestProcessor, please always use a name. If you get a deadlock it makes debugging much easier.</text>
    </revision>
  </page>
</mediawiki>
