<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqAddIconToContextMenu</title>
    <id>17799</id>
    <revision>
      <id>64355</id>
      <timestamp>2013-10-17T13:27:02Z</timestamp>
      <contributor>
        <username>Jmborer</username>
        <id>90</id>
      </contributor>
      <comment>/* How do i add an icon to the context menu? */</comment>
      <text xml:space="preserve">=== How do i add an icon to the context menu?===

NOTE: This is not recommended for NB RCP (it will break HMI standards on Mac OS X for example), but is still possible.

Steps:
* let your action implement Presenter.Popup and return a JMenuItem instance for the current action (see [1], [2])
* set the icon via putValue(javax.swing.Action.SMALL_ICON, ...)
* set the icon via putValue("iconBase", ...) to make it work properly in the toolbar. Otherwise you will get a fixed size icon.
* By using setEnabled, it makes sure every listener will be notified (JButton, JMenuItem...). Moreover it is safer to call it on the EDT since it is not sure which thread triggered the event in the first place.

&lt;pre&gt;
@ActionID(
        category = "Build",
        id = "sample.contextmenu.HelloIconAction")
@ActionReferences({
    @ActionReference(path = "Menu/File", position = 0),
    @ActionReference(path = "Loaders/Languages/Actions", position = 0),
    @ActionReference(path="Projects/Actions")
})
@ActionRegistration(
        displayName = "#CTL_HelloIconAction")

@Messages("CTL_HelloIconAction=Hello Icon Action")
public final class HelloIconAction extends AbstractAction implements Presenter.Popup {

    @StaticResource
    private static final String ICON = "sample/contextmenu/sample.gif";
    private static final long serialVersionUID = 1L;
    private final LookupListener lookupListener;
    private final Lookup.Result&lt;Project&gt; result;

    public HelloIconAction() {
        putValue(SMALL_ICON, ImageUtilities.loadImageIcon(ICON, false));
        putValue(NAME, Bundle.CTL_HelloIconAction());
        putValue("iconBase", ICON);
        result = Utilities.actionsGlobalContext().lookupResult(Project.class);
        this.lookupListener = new LookupListener() {

            @Override
            public void resultChanged(LookupEvent ev) {
                EventQueue.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        setEnabled(!result.allInstances().isEmpty());
                    }
                });
            }
        };
        result.addLookupListener(WeakListeners.create(LookupListener.class, this.lookupListener, result));
        this.lookupListener.resultChanged(null);
    }

    @Override
    public void actionPerformed(ActionEvent ev) {
        for (Project project : result.allInstances()) {
           JOptionPane.showMessageDialog(null, "Hello colorful project.\n" + project.toString());
        }
    }

    @Override
    public JMenuItem getPopupPresenter() {
        return new JMenuItem(this);
    }
}
&lt;/pre&gt;

[1] http://wiki.netbeans.org/DevFaqChangeMenuItemToolbarAppearanceForAction
&lt;br/&gt;
[2] http://forums.netbeans.org/topic40762.html &lt;br/&gt;
[3] http://benkiew.wordpress.com/2012/12/28/netbeans-how-to-create-a-context-aware-action-with-an-icon-for-the-context-menu/</text>
    </revision>
  </page>
</mediawiki>
