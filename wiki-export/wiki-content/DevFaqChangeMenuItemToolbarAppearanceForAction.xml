<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqChangeMenuItemToolbarAppearanceForAction</title>
    <id>7218</id>
    <revision>
      <id>40196</id>
      <timestamp>2010-07-24T20:39:57Z</timestamp>
      <contributor>
        <username>Jtulach</username>
        <id>526</id>
      </contributor>
      <text xml:space="preserve">__NOTOC__
===How do I change the appearance of the menu items and toolbar buttons for my action?===

The main menus and toolbars of a NetBeans Platform application are configured based on the contents of folders in the system filesystem.  There are many benefits of this approach, such as improved performance since the platform can create all the menus and toolbars without having to actually instantiate the actions with which they are associated.

Because the platform builds the menus and toolbars for you, it might seem like you have little control over how those items appear.  In practice, you have a great deal of control over the appearance for any action you create.  Typically, actions in a NetBeans platform application which will be shown in the main menu or toolbar extend from &lt;tt&gt;CallableSystemAction&lt;/tt&gt;, perhaps indirectly through its &lt;tt&gt;CookieAction&lt;/tt&gt; subclass.

In the code you've written for one of these actions, you can override &lt;tt&gt;getMenuPresenter&lt;/tt&gt; to change the appearance of the menu item associated with your action and/or override &lt;tt&gt;getToolbarPresenter&lt;/tt&gt; to change the appearance of the toolbar component associated with your action.

For example, if you wanted to make the menu item for your action have a blue background and yellow text, you could do something like this:

&lt;source lang="java"&gt;
@Override
public JMenuItem getMenuPresenter() {
    JMenuItem item = super.getMenuPresenter();
    item.setOpaque(true);
    item.setBackground(Color.BLUE);
    item.setForeground(Color.YELLOW);
    return item;
}
&lt;/source&gt;

Note that if you are changing the menu item to support a tooltip, the object returned by &lt;tt&gt;getMenuPresenter&lt;/tt&gt; needs a property change listener on the action's &lt;tt&gt;SHORT_DESCRIPTION&lt;/tt&gt; so that its tooltip value is updated correctly upon change.

'''Note about using alternate components in the main menu:''' If you want your action to work properly on Mac OS, you probably don't want to return anything other than a &lt;tt&gt;JMenu&lt;/tt&gt; or &lt;tt&gt;JMenuItem&lt;/tt&gt; from &lt;tt&gt;getMenuPresenter()&lt;/tt&gt; if you implement [http://www.netbeans.org/download/dev/javadoc/org-openide-util/org/openide/util/actions/Presenter.Menu.html Presenter.Menu].  In general, Swing allows you to treat menu popups as generic Swing containers you can put what you like into.  This is not true at all of the Mac OS screen menu bar - it expects normal menu items, and will not handle unusual contents for menus.</text>
    </revision>
  </page>
</mediawiki>
