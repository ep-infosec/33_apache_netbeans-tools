<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqAnnotationDevelopDebug</title>
    <id>18945</id>
    <revision>
      <id>68094</id>
      <timestamp>2015-06-07T22:28:27Z</timestamp>
      <contributor>
        <username>Err</username>
        <id>93</id>
      </contributor>
      <comment>Initial content for: DevFaqAnnotationDevelopDebug</comment>
      <text xml:space="preserve">== How do I develop and debug annotations for NetBeans platform apps? ==

The NetBeans platform has API support for creating XML layer entries from annotations. The popular book "NetBeans Platform for Beginners" has several examples of writing your own annotations. Familiarity with developing annotations and annotation processing is a prerequisite. Though not specifically about NetBeans platform annotations, [https://netbeans.org/kb/docs/java/annotations.html Annotation Processors Support in the NetBeans IDE] may also be useful for those new to working with annotions.

The relevant NetBeans platform APIs are described at
[http://bits.netbeans.org/dev/javadoc/org-openide-filesystems/org/openide/filesystems/annotations/package-summary.html Package org.openide.filesystems.annotations]. Note that [http://bits.netbeans.org/dev/javadoc/org-openide-filesystems/org/openide/filesystems/annotations/LayerBuilder.File.html Class LayerBuilder.File] has the methods for adding specific attributes to a layer file. Near the end of the package description there is mention of ''AnnotationProcessorTestUtils'' this is found in the NetBeans sources at ''openide.util.lookup/test/unit/src/org/openide/util/test/AnnotationProcessorTestUtils.java''.

Much of the following is found in messages of the thread [https://forums.netbeans.org/topic63404.html Debugging Platform annotations], from the platform mailing list.


== Debugging Custom Annotations ==

=== Printf is your friend ===

Tim Boudreau says: I've written quite a few annotation processors, and System.out.println() is your friend.  Trying to actually step through this stuff in a debugger is pretty useless, but I've never hit something I couldn't solve with plain old console logging.

=== If you really want to use a debugger ===

There is a mailing list thread [http://forums.netbeans.org/topic53688.html Debugging an annotation processor] from a few years ago which has a messy/complicated process suggesting ANT_OPS and "Attach Debugger" outlined by Jaroslav Tulach .

== Hints and techniques for developing annotations ==

Things that generally bite you when writing an annotation processor:

*Handling unexpected types - i.e. someone writes an annotation and a parameter that's supposed to be an int is in source code as a string - best you can do is catch these and bail out, but if you don't, you'll see an exception dialog pop up in NetBeans when your processor hits code like that
*Dealing with things that explode on contact - i.e. annotation parameters of type Class will throw an exception if you try to read their value via the Annotation instances javac gives you (the Class objects referenced are not necessarily on the classpath, or even valid) - you have to instead find the right AnnotationMirror and get the value as a string - example here, see validatorsForParam() [https://github.com/timboudreau/numble/blob/master/src/main/java/com/mastfrog/parameters/processor/Processor.java]
*Opening or trying to write a file more than once (annotation processing happens in multiple rounds - until the last round you should just collect data) - but LayerGeneratingProcessor should solve this for you if you're using it - but if not, have a look at the source code for it

Anything you do regarding analyzing or using classes when processing annotations you want to do using javac's API - you '''do not ever''' want to load a user-defined class into an annotation processor. Imagine what
 static { 
     for (;;) { EventQueue.invokeLater(new Runnable(){ throw new Error(); })}
 }
would do if you actually loaded something like that during a compilation.


== Examples ==

Checking for a subtype, can't use ''instanceof'' since should '''not''' load user classes.

 public void isSubtypeOf(Element e, String qualifiedClassName) {
         Types types = processingEnv.getTypeUtils();
         Elements elements = processingEnv.getElementUtils();
         TypeElement pageType = elements.getTypeElement(qualifiedClassName);
         if (pageType == null) { //not on the classpath javac can see
             return false;
         }
         return types.isSubtype(e.asType(), pageType.asType());
 }

Getting the elements of an enum, with lots of checking

 private List&lt;String&gt; getEnumConstants(String enumQalifiedClassName) {
     if(enumQalifiedClassName.isEmpty())
         return Collections.emptyList();
     Element e = processingEnv.getElementUtils()
             .getTypeElement(enumQalifiedClassName);
     if(e == null) {
         processingEnv.getMessager().printMessage(
                 Diagnostic.Kind.ERROR, "enumQalifiedClassName '" + enumQalifiedClassName
                 + "' does not exist");
         return null;
     }
     if(e.getKind() != ElementKind.ENUM) {
         processingEnv.getMessager().printMessage(
                 Diagnostic.Kind.ERROR, "enumQalifiedClassName '" + enumQalifiedClassName
                         + "' is not an Enum");
         return null;
     }
 
     Types types = processingEnv.getTypeUtils();
     List&lt;? extends Element&gt; elems = e.getEnclosedElements();
     List&lt;String&gt; enumConstantsNames = new ArrayList&lt;String&gt;(elems.size());
     for(Element e01 : elems) {
         if(e01.getKind() == ElementKind.ENUM_CONSTANT)
             enumConstantsNames.add(e01.getSimpleName().toString());
     }
     return enumConstantsNames;
 }</text>
    </revision>
  </page>
</mediawiki>
