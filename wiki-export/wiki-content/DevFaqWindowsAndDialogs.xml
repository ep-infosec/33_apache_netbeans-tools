<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqWindowsAndDialogs</title>
    <id>7516</id>
    <revision>
      <id>30893</id>
      <timestamp>2009-12-07T10:43:35Z</timestamp>
      <contributor>
        <username>Saubrecht</username>
        <id>518</id>
      </contributor>
      <comment>/* Can I just open up my own frames and dialogs? */</comment>
      <text xml:space="preserve">__NOTOC__
==Windows &amp; dialogs==

===Can I just open up my own frames and dialogs?===

* Yes, you could; but please instead use the standard windowing system to do these sorts of things. Then you will properly handle docking, separated floating windows, context help, various keyboard shortcuts, and many other things contributing to the IDE's appearance and functionality.

* The Window System API describes the general steps you should use to open up new function windows, if you need such a thing. Specifically, you should use &lt;tt&gt;TopComponent&lt;/tt&gt;s for such purposes.

* You can also use &lt;tt&gt;DialogDisplayer.notify(NotifyDescriptor)&lt;/tt&gt; to show dialogs that interact well with the IDE's window system, and have a number of bits of prebuilt UI. You can use various standard subclasses of &lt;tt&gt;NotifyDescriptor&lt;/tt&gt; to represent simple messages; exceptions; general-purpose dialogs with content panels; or even multi-stage wizards.

===What are the steps to create a simple Wizard?===

__Easiest way is to use File -&gt; New File wizard, Module Development category and Wizard item, which will generate all needed boilerplate
code for you. Essentially what wizard does is described below:__

====Create Panels:====
You should start with creating a set (at least one) on WizardDescriptor.Panel objects (see [http://performance.netbeans.org/howto/dialogs/wizard-panels.html Wizard Panel Performance Guide] for more information about the best way to create a panel).

====Create WizardDescriptor====
Use the panels to tell the a WizardDescriptor instance the sequence of panels it should display.
This you can do either directly by &lt;tt&gt;WizardDescriptor wd = WizardDescriptor(wizardPanelArray)&lt;/tt&gt;
Or you can create a &lt;tt&gt;WizardDescriptor.Iterator&lt;/tt&gt; with these panels, which gives you more control over the sequencing.

====Set Properties====
Set certain properties on the WizardDescriptor which can influence the appearence of the wizard. If you like to add a help pane for example you call:
&lt;tt&gt;wd.putProperty("WizardPanel_autoWizardStyle",Boolean.TRUE);
wd.putProperty("WizardPanel_helpDisplayed",Boolean.TRUE);&lt;/tt&gt;

This will display a help html file which has to be defined on each panel by setting a &lt;tt&gt;clientProperty&lt;/tt&gt; in the JComponent superclass of the '''panel''' that is the wizard content. In this case it would look like:

&lt;tt&gt;putClientProperty("WizardPanel_helpURL",new URL("http://path/to/help/html/file/panelHelp.html"));&lt;/tt&gt;

====Show Wizard ====
Finally you set the Wizard to screen using the &lt;tt&gt;DialogDisplayer&lt;/tt&gt;

&lt;pre&gt;
Dialog d = DialogDisplayer.getDefault().createDialog(wd);

        d.setVisible(true);

        d.toFront();
&lt;/pre&gt;</text>
    </revision>
  </page>
</mediawiki>
