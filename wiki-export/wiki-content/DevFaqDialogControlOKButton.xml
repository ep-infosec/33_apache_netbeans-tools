<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

--><mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="0.3" xml:lang="en" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.3/ http://www.mediawiki.org/xml/export-0.3.xsd">
  <siteinfo>
    <sitename>NetBeans Wiki</sitename>
    <base>http://wiki.netbeans.org/Main_Page</base>
    <generator>MediaWiki 1.15.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2">Media</namespace>
      <namespace key="-1">Special</namespace>
      <namespace key="0"/>
      <namespace key="1">Talk</namespace>
      <namespace key="2">User</namespace>
      <namespace key="3">User talk</namespace>
      <namespace key="4">NetBeans Wiki</namespace>
      <namespace key="5">NetBeans Wiki talk</namespace>
      <namespace key="6">File</namespace>
      <namespace key="7">File talk</namespace>
      <namespace key="8">MediaWiki</namespace>
      <namespace key="9">MediaWiki talk</namespace>
      <namespace key="10">Template</namespace>
      <namespace key="11">Template talk</namespace>
      <namespace key="12">Help</namespace>
      <namespace key="13">Help talk</namespace>
      <namespace key="14">Category</namespace>
      <namespace key="15">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>DevFaqDialogControlOKButton</title>
    <id>7243</id>
    <revision>
      <id>39153</id>
      <timestamp>2010-06-15T05:06:37Z</timestamp>
      <contributor>
        <username>Darrshan</username>
        <id>5772</id>
      </contributor>
      <comment>/* How can I control when the OK button is enabled? */</comment>
      <text xml:space="preserve">__NOTOC__
===How can I control when the OK button is enabled?===

The [http://bits.netbeans.org/dev/javadoc/org-openide-dialogs/index.html?overview-summary.html NetBeans Dialogs API] makes it easy to create consistent dialogs that behave as users would expect.  But since you don't directly create the OK button, it may not be obvious how you can enable it or disable it.

You can enable the OK button by calling &lt;pre&gt;setValid(true)&lt;/pre&gt; and disable it by calling &lt;pre&gt;setValid(false)&lt;/pre&gt;


When using DialogDescriptors some additional steps need to be taken. Its OK button cannot be enabled/diabled after it has been displyed via a DialogDisplyer. The following is a sample code : 

&lt;pre&gt;
1.  Create a new Action in one of your modules using the wizard in the
NetBeans IDE

2.  Replace the code generated inside that ActionListener with this code below:

   public void actionPerformed(ActionEvent e) {
       MyForm form = new MyForm();

       DialogDescriptor desc = new DialogDescriptor(form,

         "Hello", true, DialogDescriptor.OK_CANCEL_OPTION,
          DialogDescriptor.OK_OPTION, null);

       desc.setValid(false);

       form.setDialogDescriptor(desc);

       DialogDisplayer.getDefault().notify(desc); // displays the dialog
   }


   static class MyForm extends JPanel implements DocumentListener {

       private JTextField field;
       private DialogDescriptor desc;

       MyForm() {
           super(new BorderLayout());
           field = new JTextField();
           add(new JLabel("Type Something Here"), BorderLayout.NORTH);
           add(field, BorderLayout.SOUTH);
       }

       void setDialogDescriptor(DialogDescriptor desc) {
           this.desc = desc;
           field.getDocument().addDocumentListener(this);
       }

       private void doEnablement() {
           if (field.getText().isEmpty()) {
               desc.setValid(false);
           } else {
               desc.setValid(true);
           }
       }

       @Override
       public void insertUpdate(DocumentEvent e) {
           doEnablement();
       }

       @Override
       public void removeUpdate(DocumentEvent e) {
           doEnablement();
       }

       @Override
       public void changedUpdate(DocumentEvent e) {
           doEnablement();
       }
   }

3.  Run your application and invoke the new action you added
&lt;/pre&gt;

Here the OK button in the dialog is initially disabled, but becomes enabled when some characters are typed. Removing all characters will disable it again. 

One noteworthy point is that the following alternative fails to enable the OK button and hence the given solution is the appropriate one.

&lt;pre&gt;
desc.setValid(false);
DialogDisplayer.getDefault().notify(desc);
desc.setValid(true); //OK button doesnot get enabled
&lt;/pre&gt;</text>
    </revision>
  </page>
</mediawiki>
