<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->

===Computing Node Children Asynchronously===

If you have a Node that needs to provide child Nodes, and computing the objects the child nodes represent is slow or expensive (i.e. you need to parse a file, connect to a database, or do some sort of I/O), you do not want to compute the child nodes in the event thread (which is what happens by default).

NetBeans 6.0 introduces <tt>org.openide.nodes.ChildFactory</tt> and <tt>Children.create(ChildFactory factory, boolean asynchronous)</tt>.  Simply subclass <tt>ChildFactory</tt> and implement <tt>protected boolean createKeys(List <T> toPopulate)</tt> to build the list of objects that will be represented by the child nodes.  Implement <tt>protected Node createNodeForKey(T key)</tt> to create a Node - it will be passed each object in the list of child objects.  <tt>createKeys</tt> will be called on a background thread.

Typically you'll want to make the model object from <tt>createKeys</tt> available on the Node you create.  So a simple implementation of <tt>createNodeForKey</tt> would look something like:

<source lang="java">
    protected Node createNodeForKey(T key) {
        AbstractNode result = new AbstractNode (Children.LEAF, Lookups.singleton (key));
        result.setDisplayName (key.getName()); //or whatever
        result.setIcon (Utilities.loadImage ("path/in/jar/to/image.gif"));
        return result;
    }
</source>

ChildFactory can also simplify creating Nodes synchronously, and has the convenience that by using generics, your code can be type safe with respect to key objects.  Generally it can be used anywhere <tt>Children.Keys</tt> would be used (it uses <tt>Children.Keys</tt> under the hood).

===Apache Migration Information===

The content in this page was kindly donated by Oracle Corp. to the
Apache Software Foundation.

This page was exported from http://wiki.netbeans.org/DevFaqNodesChildFactory , 
that was last modified by NetBeans user Jtulach 
on 2010-07-24T18:45:00Z.

