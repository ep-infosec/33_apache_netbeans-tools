<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->

=== How can I run the installer for something else during module installation?===

Sometimes you are distributing some software with your module which has its own installer, or some other similar code which needs to be run once to get everything needed installed on the user's system.  If you are distributing some software (which perhaps you did not write), and it has its own installer, it is 
less work to just run its installer to be sure it is set up correctly, than to have your module do everything which that installer does too (and possibly get something wrong).

[http://bits.netbeans.org/dev/javadoc/org-netbeans-modules-autoupdate-services/overview-summary.html Autoupdate Services] primary handles NetBeans plugins based on [[DevFaqWhatIsNbm | NBM]] packaging. 

In addition, Autoupdate Services offers the possibility to install/uninstall components which are not in NBM format. This possibility has been designed to support such use-cases - for example, to install an application Servers such as [http://glassfish.dev.java.net GlassFish] by running its own installer.  

Using a native installer ensures that, if there are any problems with the way the software gets installed, it is a problem with the native installer, not your code.

To enable such possibility, Autoupdate Services API provides:
* An SPI for providing such components
** A custom installer can be assigned to the component which performs installation particular component into NetBeans
* The ability to register that [http://bits.netbeans.org/dev/javadoc/org-netbeans-modules-autoupdate-services/org/netbeans/spi/autoupdate/UpdateProvider.html special provider] among other of providers - a common Update Center

====How to setup a Update Provider providing custom components?====
Implement interface [http://bits.netbeans.org/dev/javadoc/org-netbeans-modules-autoupdate-services/org/netbeans/spi/autoupdate/UpdateProvider.html UpdateProvider] to make a provider for your component that has its own installer. This provider has to:
* Determine if the component is already installed on the target system. 
** If so, it should be able to tell which version, so the system knows if the bundled version is older, newer or the same version
* Offer a component which is available to be installed into system,
* Assign a specific '''installer''' which can install available components,
* assign a specific '''uninstaller''' which can uninstall such component if is already installed
* Register the application (i.e. store a path to the installed copy of the application) so that, at runtime, code that needs to use the custom-installed software can find it

====A code snippet showing that provider====
<pre>
public class FooNativeComponentProvider implements org.netbeans.spi.autoupdate.UpdateProvider {...}
</pre>

It has simple methods describing the provider, like this:
<pre>
    public String getName () {
        return "Foo Update Provider";
    }

    public String getDisplayName () {
        return getName ();
    }

    public String getDescription () {
        return "Providing components with custom installers";
    }

    public CATEGORY getCategory () {
        return CATEGORY.STANDARD;
    }
</pre>

The essential method '''<tt>getUpdateItems</tt>''' will return [http://bits.netbeans.org/dev/javadoc/org-netbeans-modules-autoupdate-services/org/netbeans/spi/autoupdate/UpdateItem.html UpdateItems] which matches these components. It has to return an <tt>UpdateItem</tt> both for installed component and for available component what has not been installed yet.
<pre>
    public Map<String, UpdateItem> getUpdateItems () throws IOException {
        Map<String, UpdateItem> res = new HashMap<String, UpdateItem> ();


        // 1. provide already installed version

        // get installed version
        String installed = NbPreferences.forModule (FooNativeComponentProvider.class).get (FOO_CODE_NAME, null);

        // some foo-native-runtime is installed
        if (installed != null) {
            res.put (FOO_CODE_NAME + installed, getInstalledUpdateItem (installed));
        }

        // 2. provide also version available to install

        // for this example: If none version hasn't been installed yet then provider the version 3.0
        if (installed == null) {
            res.put (FOO_CODE_NAME + "_3.0", getAvailableUpdateItem ("3.0"));

        // if the version 3.0 is installed then provide newer version 3.1
        } else if ("3.0".equals (installed)) {
            res.put (FOO_CODE_NAME + "_3.1", getAvailableUpdateItem ("3.1"));
        }
        
        return res;
    }
</pre>

There are two factory methods '''<tt>getInstalledUpdateItem</tt>''' and '''<tt>getAvailableUpdateItem</tt>'''.  Both are using SPI [http://bits.netbeans.org/dev/javadoc/org-netbeans-modules-autoupdate-services/org/netbeans/spi/autoupdate/UpdateItem.html#createNativeComponent(java.lang.String,%20java.lang.String,%20java.lang.String,%20java.util.Set,%20java.lang.String,%20java.lang.String,%20java.lang.Boolean,%20java.lang.Boolean,%20java.lang.String,%20org.netbeans.spi.autoupdate.CustomInstaller,%20org.netbeans.spi.autoupdate.UpdateLicense) UpdateItem.create(Installed)NativeComponent]

Add an <tt>UpdateItem</tt> matching available component first.  The provider has to specify a name, display name, download size and so forth. 

The most important parts are [http://bits.netbeans.org/dev/javadoc/org-netbeans-modules-autoupdate-services/org/netbeans/spi/autoupdate/CustomInstaller.html CustomInstaller] and [http://bits.netbeans.org/dev/javadoc/org-netbeans-modules-autoupdate-services/org/netbeans/spi/autoupdate/CustomUninstaller.html CustomUninstaller]. For example:
<pre>
    private static UpdateItem getAvailableUpdateItem (String specificationVersion) {
        String displayName = "Foo Runtime " + specificationVersion;
        String description = "Foo Runtime " + specificationVersion + " with native installer";
        String downloadSize = "2815";
        CustomInstaller ci = FooInstaller.getInstaller ();
        assert ci != null;
        UpdateLicense license = UpdateLicense.createUpdateLicense ("none-license", "no-license");
        UpdateItem item = UpdateItem.createNativeComponent (
                                                    FOO_CODE_NAME,
                                                    specificationVersion,
                                                    downloadSize,
                                                    null, // dependencies
                                                    displayName,
                                                    description,
                                                    false, false, "my-cluster",
                                                    ci,
                                                    license);
        return item;
    }
</pre>
Now, for an already-installed copy of the software:
<pre>
    private static UpdateItem getInstalledUpdateItem (String specificationVersion) {
        String displayName = "Foo Runtime " + specificationVersion;
        String description = "Foo Runtime " + specificationVersion + " with own installer";
        CustomUninstaller cu = FooUninstaller.getUninstaller ();
        assert cu != null;
        UpdateItem item = UpdateItem.createInstalledNativeComponent (
                                                    FOO_CODE_NAME,
                                                    specificationVersion,
                                                    null, // dependencies
                                                    displayName,
                                                    description,
                                                    cu);
        return item;
    }
</pre>

So, what does a custom installer look like? It it quite simple, look on
<pre>
public class FooInstaller implements org.netbeans.spi.autoupdate.CustomInstaller {
    /** This code will be called back while installing the corresponding native component
     * from Plugin Manager Install Wizard.
     */
    public boolean install (String codeName, String specificationVersion, ProgressHandle handle) throws OperationException {
        // CustomInstaller has to start <code>org.netbeans.api.progress.ProgressHandle</code> !!!
        handle.start ();

        // a custom code which invokes installation of native component actually
        .......
    }
}
</pre>

====How to register UpdateProvider in my application?====
Using [[DevFaqModulesGeneral | META-INF/services]] or (in NetBeans 6.9) the <tt>@ServiceProvider</tt> annotation (see [https://blogs.oracle.com/geertjan/entry/meta_inf_services_vs_layer Geertjan's blog for more info]):
# Make a <tt>META-INF/services</tt> folder in sources of your NetBeans project where the provider is,
# Make a file <tt>org.netbeans.spi.autoupdate.UpdateProvider</tt> in this folder,
# Type name of class where <tt>UpdateProvider</tt> implemented, i.e. org.netbeans.modules.fooupdateprovider.FooNativeComponentProvider
And , that's it, the NetBeans Lookup system will read it and includes that provider among other providers registered in NetBeans application.

====A sample project having this UpdateProvider====
* Sources of <tt>Foo Native Component Provider</tt>: [[Media:fooupdateprovider_FaqDevComponentWithCustomInstaller.zip | fooupdateprovider_FaqDevComponentWithCustomInstaller.zip]]
* Binary NBM to playing with: [[Media:org-netbeans-modules-fooupdateprovider_FaqDevComponentWithCustomInstaller.nbm | org-netbeans-modules-fooupdateprovider_FaqDevComponentWithCustomInstaller.nbm]]

====Important Note====
Don't apply this Update Provider earlier than NetBeans 6.5 release will be out. There were several problem which had to be fixed in NetBeans 6.5. Use [http://www.netbeans.org/downloads/index.html NetBeans 6.5] or some of recent [http://bits.netbeans.org/dev/nightly/latest/ Development builds] rather than previous releases 6.1 or 6.0!

------
Do not hesitate to contact me on mailto:jrechtacek@netbeans.org if you have any question.
{{attachments|
* [[Media:org-netbeans-modules-fooupdateprovider_FaqDevComponentWithCustomInstaller.nbm]]
* [[Media:fooupdateprovider_FaqDevComponentWithCustomInstaller.zip]]}}

===Apache Migration Information===

The content in this page was kindly donated by Oracle Corp. to the
Apache Software Foundation.

This page was exported from http://wiki.netbeans.org/DevFaqUseNativeInstaller , 
that was last modified by NetBeans user Skygo 
on 2013-12-17T22:12:04Z.

